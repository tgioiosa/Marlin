[common_LPC]
platform = https://github.com/p3p/pio-nxplpc-arduino-lpc176x/archive/0.1.3.zip
platform_packages = p3p/framework-arduino-lpc176x@^0.2.9
lib_ldf_mode = off
lib_compat_mode = strict
extra_scripts = ${common.extra_scripts}
              Marlin/src/HAL/LPC1768/upload_extra_script.py
src_filter = ${common.default_src_filter} +<src/HAL/LPC1768> +<src/HAL/shared/backtrace>
lib_deps = ${common.lib_deps}
	Servo
custom_marlin.USES_LIQUIDCRYSTAL = arduino-libraries/LiquidCrystal@~1.0.7
custom_marlin.NEOPIXEL_LED = Adafruit NeoPixel=https://github.com/p3p/Adafruit_NeoPixel/archive/1.5.0.zip
build_flags = ${common.build_flags} -DU8G_HAL_LINKS -IMarlin/src/HAL/LPC1768/include -IMarlin/src/HAL/LPC1768/u8g
	-Wno-int-in-bool-context -Wno-unused-variable -Wno-unknown-pragmas

[env:LPC1768]
platform = ${common_LPC.platform}
extends = common_LPC
board = nxp_lpc1768
lib_deps = marlinfirmware/U8glib-HAL@^0.5.0

[env:LPC1769]
platform = ${common_LPC.platform}
extends  = common_LPC
board    = nxp_lpc1769
lib_deps = marlinfirmware/U8glib-HAL@^0.5.0

[env:LPC1769_RELEASE]
build_type = release
platform = ${common_LPC.platform}
extends  = env:LPC1769 ; needed to prevent "Error: Build environment 'LPC1769 RELEASE' is incompatible with BOARD_MKS_SGEN. Use one of these: LPC1769"
board    = nxp_lpc1769
build_flags = ${common_LPC.build_flags} -g -ggdb -O1 ; any optimize levels -O1,-O2,-O3,-Os may cause Marlin Mode failure on TFT35
;build_flags =  ${common_LPC.build_flags}  -g -Wa,-L,-adhlns=asm.s   ;-save-temps    ;   -Wa,-adhlns=$(<:%%.c=$(OBJDIR)/%%.lst)
;build_flags =  ${common_LPC.build_flags}  -g -S

extra_scripts = ${common_LPC.extra_scripts}
  TGExtra\MY_LPC17xx_helper.py            ; calcs LPC checksum and writes it to 0x0000001c in binary file
  ;TGExtra\dump_env.py
;Add upload related commands
upload_protocol= custom  ; for LPC17xx use custom, cmsis-dap inserts an extra "-t, lpc1768" to upload_flags, causing errors

;strange, the arguments to command below must all be on the same line, unlike the debug_server =, (or put args in upload_flags)
upload_command = $PROJECT_PACKAGES_DIR\tool-openocd\bin\openocd
upload_flags =
  -c
  set FIRMWARENAME {$PROJECT_DIR\$SOURCE}   ; for upload, $SOURCE seems to be available as output filename
  -c
  set CALLER UPLOAD                       ; so that all cfg files know who called them
  -c 
  set LOADADDRESS 0x00000000              ; MAKE SURE TO SET THIS CORRECTLY!!!!!  For now LPC parts must start at zero(without a bootloader)!
  -c                                      ; ALSO, SINCE THE SAME LINKER .ld FILE IS SHARED TO ALL PROJECTS FROM THE DIR
                                          ; "C:\Users\tony\.platformio\packages\framework-arduino-lpc176x\system\CMSIS\system\LPC1768.ld"
                                          ; MAKE SURE THAT LPC1768.ld MATCHES THE LOADADDRESS SPECIFIED HERE OR THE MPU WON'T RUN !!!!!
  set PROGRAMMER STLINK                   ; tell MY_LPC1769.cfg whether to use STLink or MCULink interface
  -c
  set PROG_DEVICE  STLINK_COPPER          ; tell MY_LPC1769.cfg which device (STLINK_DISCO, STLINK_BLACK, STLINK_COPPER) 
  -f 
  $PROJECT_PACKAGES_DIR\tool-openocd\scripts\board\MY_LPC1769.cfg
lib_deps = marlinfirmware/U8glib-HAL@^0.5.0  ; needed by Marlin 2.0.8 release


[env:LPC1769_DEBUG]
extends = env:LPC1769_RELEASE   ; so this inherits the upload_protocol, upload_command, upload_flags too!
platform_packages = platformio/tool-openocd@^2.1100.211028 
					p3p/framework-arduino-lpc176x@^0.2.9

build_type = debug
build_flags = ${common_LPC.build_flags} -g3 -O1 -ggdb -DDEBUG -DVECT_TAB_FLASH=0x00000000  
debug_tool = custom
debug_server = $PLATFORMIO_CORE_DIR/packages/tool-openocd/bin/openocd
     -c 
     gdb_port 3334
     -c 
     tcl_port disabled
     -c 
     telnet_port disabled
     -c
     set CALLER DEBUG                     ; so that all cfg files know who called them
     -c         
     set LOADADDRESS 0x00000000           ; MAKE SURE TO SET THIS CORRECTLY!!!!!
     -c       
     set FIRMWARENAME {$PROG_PATH}        ; for debug, use $PROG_PATH ($SOURCE is not available) for output filename
     -c
     set PROGRAMMER STLINK                ; tell MY_LPC1769.cfg whether to use STLink or MCULink interface
     -c
     set PROG_DEVICE  STLINK_COPPER       ; tell MY_LPC1769.cfg which device (STLINK_DISCO, STLINK_BLACK, STLINK_COPPER) 
     -f                                   ; it outputs .elf, but the MY_LPC1769.cfg will rename it to .bin
     $PLATFORMIO_CORE_DIR/packages\tool-openocd\scripts\board\MY_LPC1769.cfg
;Add debug related commands
debug_build_flags = -g3 -O0 -ggdb3 -DDEBUG
debug_load_mode = modified
debug_port = localhost:3334               ; where GDB connects to OpenOCD
debug_load_cmds = load
debug_init_break = ;tbreak loop  ;main    ; leave empty to not stop on main(), or set a function name or line to break at
debug_init_cmds =
	;mon gdb_memory_map enable
	define pio_reset_halt_target
	  monitor reset
	  monitor halt
	end
	define pio_reset_run_target
	  monitor reset
	end
	define pio_restart_target
	  pio_reset_halt_target
	end
	target remote $DEBUG_PORT
	
    ;mon set non-stop on
    ;define hook-stop
    ;echo "hook-stop"
    ;mon cortex_m maskisr on
    ;end
    ;define hook-continue
    ;echo "hook-continue" 
    ;mon cortex_m maskisr off 
    ;end 
	monitor init                            ; GDB monitor commands to send to OpenOCD
	monitor reset init                      ; sets MEMMAP (0x400FC040) to 0x1 for User Flash mapped to address 0x00000000
	set mem inaccessible-by-default off     ; GDB commands
	monitor mdw 0x400FC040                  ; look to see if User Reset (1) and not Bootloader (0)
	$INIT_BREAK                             ; GDB commands this sends whatever is in (debug_init_break = )
	$LOAD_CMDS                              ; GDB commands this sends whatever is in (debug_load_cmds = )
debug_extra_cmds =
	set remotetimeout 15000                 ; GDB command to extend timeout from target 15000 seconds
	show remotetimeout
lib_deps = marlinfirmware/U8glib-HAL@^0.5.0 ; needed by Marlin 2.0.8 release

